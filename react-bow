#!/usr/bin/env bash

#
# Ccreate BooksOnWall mobile application
#
#
# This function prints the top level "help" notice (when the user types react-viro --help)
# It adds some viro-specific stuff as well as running react-native with the help option.
#
REACT_NATIVE_VERSION=0.59.9
REACT_VIRO_VERSION=2.17.0

printHelp() {
  printf "\n  ================== react-viro cli ====================
  The react-bow script is a wrapper around the react-viro and the react-native cli tool that facilitates setting
  up a react-bow project.

  We accept the same arguments as the react-native cli.
  react-native --help:
  -----------------------------------------------------"
  react-native -h
}

##
# This function prints the react-viro, react-native and react-native-cli versions
#
printVersion() {
  printf "== Versions ==\nreact-viro-cli: "$REACT_VIRO_VERSION"\n"
  react-native -v
}

##
# This function prints out a simple error message and a link to some help
#
printError() {
  printf "\nWhoops! Something went wrong.

If this was not expected, you can find help or contact us at the links below:
https://github.com/viromedia/viro/issues
http://www.viromedia.com/contact-1/
https://www.booksonwall.art
"
}

##
# This function parses the script"s arguments and stores them into the below variables:
# VIRO_PROJECT_NAME, VIRO_VERBOSE, VIRO_VERSION, INIT_HELP
# rule of thumb: if an argument isn"t provided, then the default value is false.
#
parseArgs() {
  VIRO_PROJECT_NAME=$2 # it"s from react-viro init [VIRO_PROJECT_NAME]... we hope
  VIRO_VERBOSE=false
  VIRO_VERSION=false
  INIT_HELP=false

  for i in "$@"
  do
    case $i in
      -v=*|--version=*)
        VIRO_VERSION="${i#*=}"
      ;;
      --verbose)
        VIRO_VERBOSE=true
      ;;
      -h|--help)
        INIT_HELP=true
      ;;
      *)
        # unknown option to init... I guess we just ignore for now
      ;;
    esac
  done
}

if [[ $# -eq 0 ]] ; then
    echo "Please indicate your project name and api url: ex sh create_bow.sh MyProject https://api.booksonwall.art"
    exit 0
fi

NAME=$2
URL=$3
UENV="URL="$URL
echo "Creating project:" $NAME
echo "Api URL:" $URL
echo "Checking local OS"
unameOut="$(uname -s)"
case "${unameOut}" in
    Linux*)     machine=Linux;;
    Darwin*)    machine=Mac;;
    CYGWIN*)    machine=Cygwin;;
    MINGW*)     machine=MinGw;;
    *)          machine="UNKNOWN:${unameOut}"
esac
echo "System" ${machine}

echo "Looking if a previous ${NAME} project exist ..."
DIR=$NAME
if [ -d "$DIR" ]; then
  # Take action if $DIR exists. #
  echo "Previous project ${DIR} exist"

  echo "Backup config files from ${DIR} to data ..."
  cp -r $DIR/.git data/.
  #cp -r $DIR/assets data/assets
  #cp -r $DIR/src data/src
  cp $DIR/README.md data/.
  cp $DIR/.gitignore data/.
  echo "Backup complete"
  cd $DIR
  rm -rf node_modules
  git rm -r * && git commit -m "fresh cleaning from BooksOnWall_cli" && git push
  cd ..
  rm -rf $DIR
  echo "Previous project destroyed and git cleaned"
fi

echo "Check dependencies ...."
# to do add more verification version list "
#
echo -e "Let's Build BooksOnWall Mobile ....... \n Assembling the Framework ..... \n To make a new mobile application \n For ios and Android"

## react-viro init
##
# This function runs the react-native cli w/ the arguments we've parsed
# to install old version we use rninit https://github.com/jacobbubu/rninit instead of react-native init
#
runReactNativeInit() {
  if [ "$VIRO_VERBOSE" = true ]; then
    rninit init $VIRO_PROJECT_NAME --source react-native@$REACT_NATIVE_VERSION --verbose || { printError; exit 1; }
  else
    rninit init $VIRO_PROJECT_NAME --source react-native@$REACT_NATIVE_VERSION || { printError; exit 1; }
  fi
}

########################
##### BEGIN SCRIPT #####
########################

# First check if the npm is available
command -v npm >/dev/null 2>&1 || { printf "I require npm but it's not installed.\nPlease follow the instructions at http://docs.viromedia.com/docs/quick-start. Aborting.\n"; exit 1; }

# Assume yarn is installed
YARN_INSTALLED=0;
# Then check if it is, if it isn"t then set YARN_INSTALLED to 1 (false? - this is bash convention since return val of 0 = no error)
command -v yarn >/dev/null 2>&1 || { YARN_INSTALLED=1; printf "Yarn is not installed, using npm instead."; }

# Checking if the react-native cli is available, and installing it if not.
if ! hash rninit 2>/dev/null; then
  printf "\nrninit hasn't been installed on this system!\n installing it now!\n"
  sudo npm install -g rninit
fi

# Next, check for one of the 3 arguments that react-native accepts and augment them.
case $1 in
  init)
    parseArgs "$@"
    if $INIT_HELP; then
      printHelp
      react-native init -h
      exit 0
    else
      runReactNativeInit
    fi
  ;;
  -h|--help)
    printHelp
    exit 0
  ;;
  -v|--version)
    printVersion
    exit 0
  ;;
  *)
    printf "\n  Unknown arguments provided! See help:\n"
    printHelp
    exit 1
  ;;
esac
# Now, if we've gotten to this point, then react-native has run and the relevant args are:
# VIRO_PROJECT_NAME - name of the project that was created
# VIRO_VERSION - since we specify the react-native version, this value should ideally
#                be the react-viro version?
# VIRO_VERBOSE - whether or not the user asked to be verbose

cd $VIRO_PROJECT_NAME
echo "yarn installed" $YARN_INSTALLED
if echo $VIRO_VERSION | grep '^[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' > /dev/null; then
  echo "Installing react-viro v"$VIRO_VERSION"..."
  if [ $YARN_INSTALLED -eq 0 ] ; then
    yarn add react-viro@$VIRO_VERSION
  else
    npm install -S -E react-viro@$VIRO_VERSION
  fi
elif [ -f $VIRO_VERSION ]; then
  echo "Installing react-viro from "$VIRO_VERSION"..."
  if [ $YARN_INSTALLED -eq 0 ] ; then
    yarn add file:$VIRO_VERSION
  else
    npm install $VIRO_VERSION
  fi
elif [ -f ../$VIRO_VERSION ]; then
  echo "Installing react-viro from "$VIRO_VERSION"..."
  if [ $YARN_INSTALLED -eq 0 ] ; then
    yarn add file:../$VIRO_VERSION
  else
    npm install ../$VIRO_VERSION
  fi
elif [ "$VIRO_VERSION" = false ]; then
  echo "Installing react-viro v"$REACT_VIRO_VERSION"..."
  if [ $YARN_INSTALLED -eq 0 ] ; then
    yarn add react-viro@$REACT_VIRO_VERSION
  else
    npm install -S -E react-viro@$REACT_VIRO_VERSION
  fi
else
  printf "Unknown version provided: "$VIRO_VERSION". Aborting!"
  exit 1
fi

if [ -f ./node_modules/react-viro/bin/project-setup.sh ]; then
  chmod +x ./node_modules/react-viro/bin/project-setup.sh
  ./node_modules/react-viro/bin/project-setup.sh $VIRO_PROJECT_NAME $VIRO_VERBOSE
else
  # these are the old instructions for versions of Viro prior to 2.1 w/o the project-setup.sh file.

  # run the javascript-setup script
  ./node_modules/react-viro/bin/javascript-setup.sh $VIRO_PROJECT_NAME $VIRO_VERBOSE

  # copy the setup-ide script to the root of the directory and make it executable
  cp ./node_modules/react-viro/bin/setup-ide.sh .
  chmod +x setup-ide.sh

  # copy the ViroFBX tool to their bin directory
  mkdir bin
  cp ./node_modules/react-viro/bin/ViroFBX bin
fi
echo "remove package-lock.json as we use yarn instead of npm"
rm -f package-lock.json

echo 'react-viro init script complete! To setup for use with Android Studio/Xcode, please run setup-ide.sh script.'

sh setup-ide.sh android
echo "CREATING .env"
# put here your VIRO api key , since version 2.17 outsourced free software not mandatory anymore
echo "VIROAPIKEY="8C94EE83-76E2-4683-ADEF-985A1F266665"" >> .env
# put here your MAPBOX api key https://docs.mapbox.com/help/how-mapbox-works/access-tokens/
echo "MAPBOX="pk.eyJ1IjoiY3JvbGwiLCJhIjoiY2p4cWVmZDA2MDA0aTNkcnQxdXhldWxwZCJ9.3pr6-2NQQDd59UBRCEeenA"" >> .env
echo $UENV >> .env



echo "Installing packages"
yarn add prop-types react-dom react-native-app-intro-slider react-navigation react-navigation-transitions react-navigation-stack react-native-reanimated yarn add react-navigation-tabs react-native-htmlview

yarn add react-native-elements

echo "Installing unstable lib"
## to enable GPS automaticly android only
yarn add react-native-android-location-enabler@1.1.0 && react-native link react-native-android-location-enabler
## to request permissions from the user
yarn add react-native-permissions@2.0.0 && react-native link react-native-permissions

yarn add react-native-screens@~1.0.0-alpha.23 && react-native link react-native-screens
## to manage pinch, touch , slide etc ...
yarn add react-native-gesture-handler@^1.0.0 && react-native link react-native-gesture-handler

yarn add react-native-vector-icons && react-native link
yarn add react-native-splash-screen && react-native link react-native-splash-screen
## to make connection with the backoffice server and download new stories
yarn add rn-fetch-blob@0.10.15 && react-native link rn-fetch-blob
## to manipulate downloaded story and store it in BooksOnWall storage directory
yarn add react-native-fs@>= @2.13.2 && react-native link react-native-fs
## to unzip the story.zip
yarn add react-native-zip-archive@^4.0.0 && react-native link react-native-zip-archive

echo "Adding internationalization"
yarn add react-native-localize
react-native link react-native-localize
# yarn add react-native-intl react-int intl
# react-native link react-native-intl
yarn add i18n-js

echo "Adding react-native-mapbox-gl"
#yarn add  @react-native-mapbox-gl/maps
yarn add https://github.com/react-native-mapbox-gl/maps#7.0.1
react-native link @react-native-mapbox-gl/maps
yarn add @react-native-community/geolocation
react-native link @react-native-community/geolocation


echo "Adding netinfo to check connectivity"
# to check if network is open and witch type of connection the mobile has
yarn add @react-native-community/netinfo@^3.0.0
react-native link @react-native-community/netinfo

echo "Adding Andoid X compatibility"
# Adding jetifier to rewrite package to facilitate migration to AndroidX
yarn add @jumpn/react-native-jetifier -D
echo "installing android arDebug"
cd android
./gradlew install:arDebug

echo "android.useAndroidX=true" >> gradle.properties
echo "android.enableJetifier=true" >> gradle.properties
cd ../
pwd
echo "Running jetifier"
yarn react-native-jetifier

echo "Adding commands to package.json"
pwd
SCRIPTS=`jq '.scripts = { link: "react-native link", setIcon: "react-native set-icon --path", setSplash: "react-native set-splash --path", postinstall: "yarn react-native-jetifier", prestart: "./node_modules/react-viro/bin/run_ngrok.sh", start: "node node_modules/react-native/local-cli/cli.js start", android: "react-native run-android --variant=arDebug", ios: "react-native run-ios --variant=arDebug" }' package.json`
touch n.json && echo $SCRIPTS >> n.json
rm package.json && touch package.json
jq . n.json > package.json && rm n.json
SCRIPTS=`jq '.jest = {preset: "react-native", setupFiles: [ "./node_modules/react-native-gesture-handler/jestSetup.js" ] }' package.json `
touch n.json && echo $SCRIPTS >> n.json
rm package.json && touch package.json
jq . n.json > package.json && rm n.json
#jq "./package.json"
# copy files
echo "Copy src directory"
cp -r ../data/src .
echo "Copy assets"
cp -r ../data/assets .

echo "Switch main app.js page"

mv App.js src/Ar.js
mv src/App.js App.js
mv js src/.
cp ../data/README.md .
#comment cp .git if you want to commit in another git repository
cp -r ../data/.git .
cp -r ../data/.gitignore .

# icon & splash

echo "Setting icon and splash"
echo "Adding react-native-make used by setIcon and setSplash"
# to be able to set Icon and Splash for android and ios Warning this package is unnecessary for react-navive@>=60
yarn add -D @bam.tech/react-native-make
react-native set-icon --path assets/icon/bow_adaptive-icon_1024.png
react-native set-splash --path assets/splash/bow_splash_3000.png --resize contain --background="#1A1B1C"

# echo "git add && git commit && git push"
# git add .buckconfig .flowconfig .gitattributes .gitignore .watchmanconfig App.js README.md __tests__/ android/ app.json assets/ babel.config.js bin/ index.android.js index.ios.js index.js ios/ jetificableGroups.json metro.config.js package.json rn-cli.config.js setup-ide.sh src/
# git commit -m "new BooksOnWall_cli build"
# git push
echo -e "Checking that the Developement Environement Variables are well set"
npx @react-native-community/cli doctor
# End of script
echo "Your mobile application is ready to build"
echo "Connect your phone to the computer"
echo "cd" $2
echo "yarn start && yarn android to build"
exit 0
