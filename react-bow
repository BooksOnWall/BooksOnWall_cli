#!/usr/bin/env bash
#
# Create BooksOnWall mobile application
#
#
# This function prints the top level "help" notice (when the user types react-viro --help)
# It adds some viro-specific stuff as well as running react-native with the help option.
#
REACT_NATIVE_VERSION=0.59.9
REACT_VIRO_VERSION=2.17.0

printHelp() {
  printf "\n  ================== react-viro cl ====================
  The react-bow script is a wrapper around the react-viro and the react-native cli tool that facilitates setting
  up a react-bow project.

  We accept the same arguments as the react-native cli.
  react-native --help:
  -----------------------------------------------------"
  react-native -h
}

##
# This function prints the react-viro, react-native and react-native-cli versions
#
printVersion() {
  printf "== Versions ==\nreact-viro-cli: "$REACT_VIRO_VERSION"\n"
  react-native -v
}

##
# This function prints out a simple error message and a link to some help
#
printError() {
  printf "\nWhoops! Something went wrong.

If this was not expected, you can find help or contact us at the links below:
https://github.com/viromedia/viro/issues
http://www.viromedia.com/contact-1/
https://www.booksonwall.art
"
}

##
# This function parses the script"s arguments and stores them into the below variables:
# VIRO_PROJECT_NAME, VIRO_VERBOSE, VIRO_VERSION, INIT_HELP
# rule of thumb: if an argument isn"t provided, then the default value is false.
#
parseArgs() {
  VIRO_PROJECT_NAME=$2 # it"s from react-viro init [VIRO_PROJECT_NAME]... we hope
  VIRO_VERBOSE=false
  VIRO_VERSION=false
  INIT_HELP=false

  for i in "$@"
  do
    case $i in
      -v=*|--version=*)
        VIRO_VERSION="${i#*=}"
      ;;
      --verbose)
        VIRO_VERBOSE=true
      ;;
      -h|--help)
        INIT_HELP=true
      ;;
      *)
        # unknown option to init... I guess we just ignore for now
      ;;
    esac
  done
}

if [[ $# -eq 0 ]] ; then
    echo "\033[5;41;1;37m   *** ERROR *** Please indicate your project name and api url: ex ./react-bow init MyProject https://api.booksonwall.art  \033[0m"
    exit 0
fi

NAME=$2
name="${NAME,,}"
URL=$3
UENV="SERVER_URL="$URL
echo -e "\033[1;32m Creating project:" $NAME "\033[0m"
echo -e "\033[1;32m Api URL:" $URL "\033[0m"
echo -e "\033[1;32m com."$name  "\033[0m"
echo "Checking local OS"
unameOut="$(uname -s)"
case "${unameOut}" in
    Linux*)     machine=Linux;;
    Darwin*)    machine=Mac;;
    CYGWIN*)    machine=Cygwin;;
    MINGW*)     machine=MinGw;;
    *)          machine="UNKNOWN:${unameOut}"
esac
echo -e "\033[1;32m System" ${machine} "\033[0m"
if [ ${machine} = "Mac" ]; then
  Platform="all"
else
  Platform="android"
fi
echo -e "\033[1;32m Platform: " $Platform "\033[0m"

###############################################################################
## installing react-native unimodules https://github.com/SRHealth/react-native-mapbox-navigation
## First download git project and kepp some datas
###############################################################################

if [ ! -d "RNMN" ]; then
  echo -e "\033[1;32m Downloading react-native-mapbox-navigation \033[0m";
  # fork from SRHealth/react-native-mapbox-navigation with mapbox upgraded
  # git clone https://github.com/derroobin/react-native-mapbox-navigation.git RNMN2
  # SRHealth/react-native-mapbox-navigation won't compile after
  # git clone https://github.com/SRHealth/react-native-mapbox-navigation RNMN
  # tom react-native-mapbox-navigation fork
  git clone https://github.com/tombombadilom/react-native-mapbox-navigation.git RNMN
else
  cd RNMN
  # watch if no update is required
  echo -e "\033[1;32m Project react-native-mapbox-navigation already exist \033[0m , checking if update is available."
  git pull
  cd ..
fi
# Copy mapbox-navigation's files into data/.

echo -e "\033[1;32m Extract Android navigation module \033[0m from git project directory"
mkdir -p data/android
cp -r RNMN/android/app/src/main/java/com/rnmapboxnavigation/Mapbox data/android/.
#cp RNMN/android/app/src/main/res/layout/navigation_view.xml data/android/.
cp -r RNMN/android/app/src/main/res/values data/android/.

echo -e "\033[1;32m Extract ios navigation module \033[0m from git project directory"
mkdir -p data/ios
cp -r RNMN/ios/* data/ios/.
echo -e "\033[1;32m Extract NavigationView \033[0m from git project directory"
cp RNMN/NavigationView.js data/src/api/stories/stage/.
cp RNMN/App.js data/src/api/stories/stage/RNMNnav.js
#cp data/MapboxNavigationManager.java data/android/Mapbox/.
############################################################################
##
##  Remove RNMN git directory
##
############################################################################
echo -e "\033[1;32m Removing RNMN directory \033[0m we don't need it anymore"
rm -rf RNMN

############################################################################
##
##  Modify React native Mapbox Navigation file implementation
##
############################################################################
echo -e "\033[1;34m Changing mapbox-navigation \033[0m path and R"
echo -e "\033[1;34m Changing com.rnmapboxnavigation \033[0m by com."$name" in:
    => android/Mapbox/*
      -> MapboxNavigationViewManager.java
      -> MapboxNavigationView.java
      -> MapboxNavigationViewPackage.java"


sed -i 's/com.rnmapboxnavigation.R/com.'$name'.R/g' data/android/Mapbox/MapboxNavigationManager.java
sed -i 's/com.rnmapboxnavigation/com.'$name'/g' data/android/Mapbox/MapboxNavigationManager.java
sed -i 's/com.rnmapboxnavigation.R/com.'$name'.R/g' data/android/Mapbox/MapboxNavigationViewManager.java

sed -i 's/com.rnmapboxnavigation/com.'$name'/g' data/android/Mapbox/MapboxNavigationViewManager.java
sed -i 's/com.rnmapboxnavigation/com.'$name'/g' data/android/Mapbox/MapboxNavigationViewPackage.java
# sed -i 's/com.rnmapboxnavigation/com.'$name'/g' data/android/Mapbox/MapboxNavigationView.java

echo -e "\033[1;34m Changing android.support.annotation \033[0m by androidx.annotation"

# sed -i 's/import\ android.support.annotation/import\ androidx.annotation/g' data/android//Mapbox/MapboxNavigationViewManager.java
# sed -i 's/import\ android.support.annotation/import\ androidx.annotation/g' data/android//Mapbox/MapboxNavigationView.java

echo -e "\033[1;36m Others mapbox-navigation modification will happend later in the script \033[0m"
#################################################################################
##
## End of Project react-native-mapbox-navigation backup
##
#################################################################################
echo "Looking if a previous ${NAME} project exist ..."
DIR=$NAME
if [ -d "$DIR" ]; then
  # Take action if $DIR exists. #
  echo -e "Previous project ${DIR} exist"

  echo -e "Backup config files from ${DIR} to data ..."
  cp -r $DIR/.git data/.
  #cp -r $DIR/assets data/assets
  #cp -r $DIR/src data/src
  cp $DIR/README.md data/.
  cp $DIR/.gitignore data/.
  echo "Backup complete"
  cd $DIR
  rm -rf node_modules
  git rm -r * && git commit -m "fresh cleaning from BooksOnWall_cli" && git push
  cd ..
  rm -rf $DIR
  echo -e "Previous project destroyed and git cleaned"
fi

echo "Check dependencies ...."
# to do add more verification version list "
#
echo -e "\033[1;36m Let's Build BooksOnWall Mobile \033[0m ....... \n Assembling the Framework ..... \n To make a new mobile application \n For ios and Android"

## react-viro init
##
# This function runs the react-native cli w/ the arguments we've parsed
# to install old version we use rninit https://github.com/jacobbubu/rninit instead of react-native init
#
runReactNativeInit() {
  if [ "$VIRO_VERBOSE" = true ]; then
    rninit init $VIRO_PROJECT_NAME --source react-native@$REACT_NATIVE_VERSION --verbose || { printError; exit 1; }
  else
    rninit init $VIRO_PROJECT_NAME --source react-native@$REACT_NATIVE_VERSION || { printError; exit 1; }
  fi
}

########################
##### BEGIN SCRIPT #####
########################

# First check if the npm is available
command -v npm >/dev/null 2>&1 || { printf "I require npm but it's not installed.\nPlease follow the instructions at http://docs.viromedia.com/docs/quick-start. Aborting.\n"; exit 1; }

# Assume yarn is installed
YARN_INSTALLED=0;
# Then check if it is, if it isn"t then set YARN_INSTALLED to 1 (false? - this is bash convention since return val of 0 = no error)
command -v yarn >/dev/null 2>&1 || { YARN_INSTALLED=1; printf "Yarn is not installed, using npm instead."; }

# Checking if the react-native cli is available, and installing it if not.
if ! hash rninit 2>/dev/null; then
  printf "\nrninit hasn't been installed on this system!\n installing it now!\n"
  sudo npm install -g rninit
fi

# Next, check for one of the 3 arguments that react-native accepts and augment them.
case $1 in
  init)
    parseArgs "$@"
    if $INIT_HELP; then
      printHelp
      react-native init -h
      exit 0
    else
      runReactNativeInit
    fi
  ;;
  -h|--help)
    printHelp
    exit 0
  ;;
  -v|--version)
    printVersion
    exit 0
  ;;
  *)
    printf "\n  Unknown arguments provided! See help:\n"
    printHelp
    exit 1
  ;;
esac

############################################################################################
# Now, if we've gotten to this point, then react-native has run and the relevant args are:
# VIRO_PROJECT_NAME - name of the project that was created
# VIRO_VERSION - since we specify the react-native version, this value should ideally
#                be the react-viro version?
# VIRO_VERBOSE - whether or not the user asked to be verbose

cd $VIRO_PROJECT_NAME
echo "yarn installed" $YARN_INSTALLED
if echo $VIRO_VERSION | grep '^[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' > /dev/null; then
  echo -e "\033[1;32m Installing react-viro v"$VIRO_VERSION"...\033[0m"
  if [ $YARN_INSTALLED -eq 0 ] ; then
    yarn add react-viro@$VIRO_VERSION -E 2> >(grep -v warning 1>&2)
  else
    npm install -S -E react-viro@$VIRO_VERSION
  fi
elif [ -f $VIRO_VERSION ]; then
  echo -e "\033[1;32m Installing react-viro from "$VIRO_VERSION"...\033[0m"
  if [ $YARN_INSTALLED -eq 0 ] ; then
    yarn add file:$VIRO_VERSION
  else
    npm install $VIRO_VERSION
  fi
elif [ -f ../$VIRO_VERSION ]; then
  echo -e "\033[1;32m Installing react-viro from "$VIRO_VERSION"...\033[0m"
  if [ $YARN_INSTALLED -eq 0 ] ; then
    yarn add file:../$VIRO_VERSION
  else
    npm install ../$VIRO_VERSION
  fi
elif [ "$VIRO_VERSION" = false ]; then
  echo -e "\033[1;32m Installing react-viro v"$REACT_VIRO_VERSION"...\033[0m"
  if [ $YARN_INSTALLED -eq 0 ] ; then
    yarn add react-viro@$REACT_VIRO_VERSION -E 2> >(grep -v warning 1>&2)
  else
    npm install -S -E react-viro@$REACT_VIRO_VERSION
  fi
else
  printf "\033[1;31m Unknown version provided: "$VIRO_VERSION". Aborting! \033[0m"
  exit 1
fi

if [ -f ./node_modules/react-viro/bin/project-setup.sh ]; then
  chmod +x ./node_modules/react-viro/bin/project-setup.sh
  ./node_modules/react-viro/bin/project-setup.sh $VIRO_PROJECT_NAME $VIRO_VERBOSE
else
  # these are the old instructions for versions of Viro prior to 2.1 w/o the project-setup.sh file.

  # run the javascript-setup script
  ./node_modules/react-viro/bin/javascript-setup.sh $VIRO_PROJECT_NAME $VIRO_VERBOSE

  # copy the setup-ide script to the root of the directory and make it executable
  cp ./node_modules/react-viro/bin/setup-ide.sh .
  chmod +x setup-ide.sh

  # copy the ViroFBX tool to their bin directory
  mkdir bin
  cp ./node_modules/react-viro/bin/ViroFBX bin
fi
echo "remove package-lock.json as we use yarn instead of npm"
rm -f package-lock.json

echo -e '\033[1;32m react-viro init script complete! \033[0m
  To setup for use with Android Studio/Xcode,
  please run setup-ide.sh script.'

##################################################################################
##  End of react-native and react-viro default install
##  Start the setup of targueted IDE ex: android|ios|all
##################################################################################
echo -e "\033[1;32m Add jni directory in android/app/src/main/. "
mkdir -p android/app/src/main/jni
echo -e "\033[1;32m Setup ide for: " $Platform "\033[0m"
sh setup-ide.sh $Platform

echo -e "\033[1;32m CREATING .env \033[0m"
# put here your VIRO api key , since version 2.17 outsourced free software not mandatory anymore
echo 'VIROAPI_KEY="8C94EE83-76E2-4683-ADEF-985A1F266665"' >> .env
# put here your MAPBOX api key https://docs.mapbox.com/help/how-mapbox-works/access-tokens/
mapboxtoken="pk.eyJ1IjoiY3JvbGwiLCJhIjoiY2p4cWVmZDA2MDA0aTNkcnQxdXhldWxwZCJ9.3pr6-2NQQDd59UBRCEeenA"
echo "MAPBOX_KEY='$mapboxtoken'" >> .env
echo $UENV >> .env
echo "PROJECT_NAME="$2 >> .env


#################################################################################
##
## Before installing all the packages we have to set the
##  - android-mapbox-sdk-navigation https://docs.mapbox.com/help/tutorials/android-navigation-sdk
##
#################################################################################

echo -e "\033[1;32m Mapbox Sdk Navigation install \033[0m"
# insert in repoitories maven { url 'https://mapbox.bintray.com/mapbox' } in android/build.gradle
sed -i "30i \ \ \ \  maven { url 'https://mapbox.bintray.com/mapbox' }" android/build.gradle
# insert in dependencies below implementation 'com.facebook.react:react-native:+' >> implementation 'com.mapbox.mapboxsdk:mapbox-android-navigation-ui:0.42.4' in andoid/app.build.gradle
sed -i "162i \ \ \ \ implementation 'com.mapbox.mapboxsdk:mapbox-android-navigation:0.42.4'" android/app/build.gradle
sed -i "163i \ \ \ \ implementation 'com.mapbox.mapboxsdk:mapbox-android-navigation-ui:0.42.4'" android/app/build.gradle
sed -i "164i \ \ \ \ implementation 'androidx.annotation:annotation:1.1.0'" android/app/build.gradle

#
# add mapbox token in android project
# need to be changes for .env use
echo -e "\033[1;32m Adding Mapbox access_token in android/app/main/res/values/strings.xml  \033[0m"
sed -i "2i <string name=\"mapbox_access_token\">"$mapboxtoken"</string>" android/app/src/main/res/values/strings.xml

###################################################################################
## adding mapbox navigation modules previously stored from RNMN project
## https://github.com/SRHealth/react-native-mapbox-navigation
###################################################################################
echo -e "\033[1;32m Adding Mapbox navigation in the project  \033[0m"

cp -r ../data/android/Mapbox android/app/src/main/java/com/$name/.
# cp ../data/android/values/dimens.xml android/app/src/main/res/values/.
cp ../data/android/values/styles.xml android/app/src/main/res/values/.

# echo -e "\033[1;32m Creating android layout directory && Copying navigation_view.xml \033[0m"
# mkdir -p android/app/src/main/res/layout
# cp ../data/android/navigation_view.xml android/app/src/main/res/layout/navigation_view.xml

echo -e "\033[1;32m Installing Mapbox navigation in android ui manager \033[0m"

sed -i "164i \ \ \ \ implementation 'androidx.annotation:annotation:1.1.0'" android/app/build.gradle
sed -i "12i import\ com.$name.Mapbox.MapboxNavigationViewPackage;" android/app/src/main/java/com/$name/MainApplication.java
sed -i "29i \ \ \ \ \ \ \ \ \ \ new MapboxNavigationViewPackage()," android/app/src/main/java/com/$name/MainApplication.java

echo -e "\033[1;31m Missing mapbox-navigation ios \033[0m install need to be done later ... "

#################################################################################
##
## First installing dependancies and react-native libs that need to be linked
## Usueally happends well but need some verifications before compilation
##
#################################################################################
echo -e "\033[1;32m Installing unstable lib \033[0m
  - They are libs that are a bit buggy because the react-native version
  is just below 0.60
  - Some are 0.60 and androidX IOS 13 ready ,
  some are not yet ready"
## enable safe area conbtext from js ( required by react-native-stack  ?? !!)
yarn add react-native-safe-area-context && react-native link react-native-safe-area-context

yarn add @react-native-community/masked-view && react-native link @react-native-community/masked-view
## Cross platform geolocation
yarn add @react-native-community/geolocation && react-native link @react-native-community/geolocation
## to enable GPS automaticly android only
yarn add react-native-android-location-enabler@1.1.0 2> >(grep -v warning 1>&2) && react-native link react-native-android-location-enabler
## to request permissions from the user
yarn add react-native-permissions@2.0.0 2> >(grep -v warning 1>&2) && react-native link react-native-permissions
# react-native-reanimated
yarn add react-native-reanimated@^1.4.0 2> >(grep -v warning 1>&2) && react-native link react-native-reanimated
# screens
yarn add react-native-screens@~1.0.0-alpha.23 2> >(grep -v warning 1>&2) && react-native link react-native-screens
## to manage pinch, touch , slide etc ...
yarn add react-native-gesture-handler@^1.0.0 2> >(grep -v warning 1>&2) && react-native link react-native-gesture-handler

yarn add react-native-vector-icons 2> >(grep -v warning 1>&2) && react-native link
yarn add react-native-splash-screen 2> >(grep -v warning 1>&2) && react-native link react-native-splash-screen
## to make connection with the backoffice server and download new stories
yarn add rn-fetch-blob@0.10.15 2> >(grep -v warning 1>&2) && RNFB_ANDROID_PERMISSIONS=true react-native link
## to manipulate downloaded story and store it in BooksOnWall storage directory
yarn add react-native-fs@2.13.2 2> >(grep -v warning 1>&2) && react-native link react-native-fs

## simple toast popup lib
yarn add react-native-simple-toast 2> >(grep -v warning 1>&2) && react-native link react-native-simple-toast   
## to unzip the story.zip
echo -e "\033[1;31m Warning react-native-zip-archive@4.1.5 not installed
  because it won't compile yet:
  https://github.com/mockingbot/react-native-zip-archive/issues/180 "

#yarn add react-native-zip-archive@4.1.5 && react-native link react-native-zip-archive
#yarn add extract-zip

echo -e "\033[1;32m  Installing react easy packages \033[0m"
yarn add prop-types lodash react-dom react-native-app-intro-slider react-navigation react-navigation-transitions react-navigation-stack react-navigation-tabs react-native-htmlview react-native-elements react-native-awesome-alerts react-native-safe-area-view 2> >(grep -v warning 1>&2)

echo -e "\033[1;32m  Adding internationalization \033[0m"
yarn add react-native-localize 2> >(grep -v warning 1>&2) && react-native link react-native-localize
# yarn add react-native-intl react-int intl
# react-native link react-native-intl
yarn add i18n-js 2> >(grep -v warning 1>&2)

 echo -e "\033[1;32m Adding: \033[0m
   -> \033[1;32m react-native-mapbox-gl \033[0m from github.com/react-native-mapbox-gl/maps#7.0.1 ,
   -> \033[1;32m Mapbox SDK, \033[0m
   -> \033[1;32m geolocation \033[0m
   -> \033[1;32m @turf/distance \033[0m"
# adding mapbox-gl/maps
yarn add https://github.com/react-native-mapbox-gl/maps#7.0.1 2> >(grep -v warning 1>&2)
react-native link @react-native-mapbox-gl/maps

# for destination calculation => used in MapboxClient.js
yarn add @mapbox/mapbox-sdk 2> >(grep -v warning 1>&2)
yarn add @turf/distance 2> >(grep -v warning 1>&2)

echo -e "\033[1;32m Adding netinfo to check connectivity \033[0m"
# to check if network is open and witch type of connection the mobile has
yarn add @react-native-community/netinfo@^3.0.0 2> >(grep -v warning 1>&2)
react-native link @react-native-community/netinfo

echo -e "\033[1;32m Adding Sound and Video player and keep-awake  \033[0m"
yarn add react-native-keep-awake 2> >(grep -v warning 1>&2)
react-native link react-native-keep-awake
#yarn add react-native-sound 2> >(grep -v warning 1>&2)
#react-native link react-native-sound
#yarn add react-native-video@^4.0.0 2> >(grep -v warning 1>&2)
#react-native link react-native-video

echo -e "\033[1;32m Adding Andoid X compatibility \033[0m"
# Adding jetifier to rewrite package to facilitate migration to AndroidX
yarn add @jumpn/react-native-jetifier -D 2> >(grep -v warning 1>&2)

echo -e "\033[1;32m installing androidX compliance \033[0m"
cd android
# ./gradlew install:arDebug



echo "android.useAndroidX=true" >> gradle.properties
echo "android.enableJetifier=true" >> gradle.properties
cd ../
pwd
echo -e "\033[1;32m Running jetifier \033[0m"

yarn react-native-jetifier 2> >(grep -v warning 1>&2)

echo -e "\033[1;32m Adding commands to package.json \033[0m"
pwd
SCRIPTS=`jq '.scripts = {  syncFromCli: "cp -r ../data/src/api ../data/src/App.js ../data/src/utils src/.", syncToCli: "cp -r src/* ../data/src/.", doctor: "npx @react-native-community/cli doctor", link: "react-native link", setIcon: "react-native set-icon --path", setSplash: "react-native set-splash --path", postinstall: "yarn react-native-jetifier", prestart: "./node_modules/react-viro/bin/run_ngrok.sh", start: "node node_modules/react-native/local-cli/cli.js start", android: "react-native run-android --variant=arDebug", ios: "react-native run-ios --variant=arDebug" }' package.json`
touch n.json && echo $SCRIPTS >> n.json
rm package.json && touch package.json
jq . n.json > package.json && rm n.json
SCRIPTS=`jq '.jest = {preset: "react-native", setupFiles: [ "./node_modules/react-native-gesture-handler/jestSetup.js" ] }' package.json `
touch n.json && echo $SCRIPTS >> n.json
rm package.json && touch package.json
jq . n.json > package.json && rm n.json
#jq "./package.json"
# copy files
echo -e "\033[1;32m Copy src directory \033[0m"
cp -r ../data/src .
echo -e "\033[1;32m Copy assets ... \033[0m"
cp -r ../data/assets .

echo -e "\033[1;32m Switch main app.js page \033[0m"

mv App.js src/Ar.js
mv src/App.js App.js
mv js src/.
cp ../data/README.md .

if [ -d "../data/.git" ]; then
  # comment cp ../data/.git . if you want to commit in another git repository
  cp -r ../data/.git .
fi

if [ -f "../data/.gitignore" ]; then
  cp  ../data/.gitignore .
fi


# .env
echo -e "\033[1;32m Adding babel-plugin-transform-inline-environment-variables \033[0m
  to get .env variables"
yarn add react-native-dotenv 2> >(grep -v warning 1>&2)
yarn add babel-plugin-transform-inline-environment-variables -D 2> >(grep -v warning 1>&2)
yarn add metro-react-native-babel-preset -D 2> >(grep -v warning 1>&2)
if [ -f "../data/.gitignore" ]
then
  cp ../data/.babelrc .
fi
if [ -f "../data/.watchmanconfig" ]
then
  cp ../data/.watchmanconfig .
fi

# icon & splash

echo -e "\033[1;32m Setting icon and splash \033[0m"
echo -e "\033[1;32m Adding react-native-make used by setIcon and setSplash \033[0m"
# to be able to set Icon and Splash for android and ios Warning this package is unnecessary for react-navive@>=60
yarn add @bam.tech/react-native-make -D 2> >(grep -v warning 1>&2)
react-native set-icon --path assets/icon/bow_adaptive-icon_1024.png
react-native set-splash --path assets/splash/bow_splash_3000.png --resize contain --background="#1A1B1C"

# echo "git add && git commit && git push"
# git add .buckconfig .flowconfig .gitattributes .gitignore .watchmanconfig App.js README.md __tests__/ android/ app.json assets/ babel.config.js bin/ index.android.js index.ios.js index.js ios/ jetificableGroups.json metro.config.js package.json rn-cli.config.js setup-ide.sh src/
# git commit -m "new BooksOnWall_cli build"
# git push
echo -e "\033[1;32m Adding reactotron-react-native \033[0m
  for debug and dev purpose
  and \033[1;32m @react-native-community/cli doctor \033[0m
  Checking that the Developement Environement Variables are well set"

yarn add reactotron-react-native -D 2> >(grep -v warning 1>&2)
npx @react-native-community/cli doctor
# End of script
echo -e "\033[1;32m Your mobile application is ready to build  \033[0m"
echo -e "\033[1;32m Connect your phone to the computer  \033[0m"
echo -e "\033[1;32m cd $2  \033[0m"
echo -e "\033[1;32m yarn start && yarn android to build  \033[0m"
exit 0
